{"version":3,"sources":["webpack:///./src/app/_helpers/index.ts","webpack:///./src lazy namespace object","webpack:///./src/app/home/index.ts","webpack:///./src/app/login/index.ts","webpack:///./src/app/register/index.ts","webpack:///./src/main.ts","webpack:///./src/polyfills.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/_helpers/auth.guard.ts","webpack:///./src/app/_services/alert.service.ts","webpack:///./src/app/_services/authentication.service.ts","webpack:///./src/app/_services/user.service.ts","webpack:///./src/app/_helpers/error.interceptor.ts","webpack:///./src/app/_helpers/jwt.interceptor.ts","webpack:///./src/app/_helpers/fake-backend.ts","webpack:///./src/app/app.routing.ts","webpack:///./src/app/home/home.component.ts","webpack:///./src/app/home/home.component.html","webpack:///./src/app/login/login.component.ts","webpack:///./src/app/login/login.component.html","webpack:///./src/app/register/register.component.ts","webpack:///./src/app/register/register.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/_content/app.less?0296","webpack:///./src/app/_content/app.less","webpack:///./src/app/app.component.html","webpack:///./src/app/_components/index.ts","webpack:///./src/app/_components/alert.component.ts","webpack:///./src/app/_components/alert.component.html","webpack:///./src/app/_services/index.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","platformBrowserDynamic","bootstrapModule","AppModule","NgModule","imports","BrowserModule","ReactiveFormsModule","HttpClientModule","appRoutingModule","declarations","AppComponent","HomeComponent","LoginComponent","RegisterComponent","AlertComponent","providers","provide","HTTP_INTERCEPTORS","useClass","JwtInterceptor","multi","ErrorInterceptor","fakeBackendProvider","bootstrap","router","authenticationService","canActivate","route","state","this","currentUserValue","navigate","queryParams","returnUrl","url","AuthGuard","Injectable","providedIn","Router","AuthenticationService","subject","Subject","keepAfterRouteChange","events","subscribe","event","NavigationStart","clear","getAlert","asObservable","success","message","next","type","text","error","AlertService","http","currentUserSubject","BehaviorSubject","JSON","parse","localStorage","getItem","currentUser","value","login","username","password","post","email","pipe","map","user","setItem","stringify","logout","removeItem","HttpClient","getAll","get","register","delete","UserService","intercept","request","handle","catchError","err","status","location","reload","statusText","throwError","token","clone","setHeaders","Authorization","users","method","headers","body","of","mergeMap","endsWith","find","x","ok","firstName","lastName","length","Math","max","push","isLoggedIn","unauthorized","match","filter","urlParts","split","parseInt","materialize","delay","dematerialize","HttpResponse","FakeBackendInterceptor","routes","path","component","redirectTo","RouterModule","forRoot","useHash","userService","ngOnInit","loadAllUsers","deleteUser","Component","template","formBuilder","alertService","loading","submitted","loginForm","group","Validators","required","snapshot","controls","onSubmit","invalid","f","first","data","console","log","FormBuilder","ActivatedRoute","registerForm","minLength","addresses","selector","content","i","options","transform","undefined","locals","subscription","cssClass","ngOnDestroy","unsubscribe"],"mappings":"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","file":"main.js","sourcesContent":["export * from './auth.guard';\nexport * from './error.interceptor';\nexport * from './jwt.interceptor';\nexport * from './fake-backend';","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = 153;","export * from './home.component';","export * from './login.component';","export * from './register.component';","import './polyfills';\n\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\nimport { AppModule } from './app/app.module';\n\nplatformBrowserDynamic().bootstrapModule(AppModule);","import 'core-js/features/reflect';\nimport 'zone.js/dist/zone';","import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';\n\n// used to create fake backend\nimport { fakeBackendProvider } from './_helpers';\n\nimport { appRoutingModule } from './app.routing';\nimport { JwtInterceptor, ErrorInterceptor } from './_helpers';\nimport { AppComponent } from './app.component';\nimport { HomeComponent } from './home';\nimport { LoginComponent } from './login';\nimport { RegisterComponent } from './register';\nimport { AlertComponent } from './_components';\n\n@NgModule({\n    imports: [\n        BrowserModule,\n        ReactiveFormsModule,\n        HttpClientModule,\n        appRoutingModule\n    ],\n    declarations: [\n        AppComponent,\n        HomeComponent,\n        LoginComponent,\n        RegisterComponent,\n        AlertComponent\n    ],\n    providers: [\n        { provide: HTTP_INTERCEPTORS, useClass: JwtInterceptor, multi: true },\n        { provide: HTTP_INTERCEPTORS, useClass: ErrorInterceptor, multi: true },\n\n        // provider used to create fake backend\n        fakeBackendProvider\n    ],\n    bootstrap: [AppComponent]\n})\nexport class AppModule { };\n","import { Injectable } from '@angular/core';\nimport { Router, CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\n\nimport { AuthenticationService } from '@/_services';\n\n@Injectable({ providedIn: 'root' })\nexport class AuthGuard implements CanActivate {\n    constructor(\n        private router: Router,\n        private authenticationService: AuthenticationService\n    ) {}\n\n    canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {\n        const currentUser = this.authenticationService.currentUserValue;\n        if (currentUser) {\n            // authorised so return true\n            return true;\n        }\n\n        // not logged in so redirect to login page with the return url\n        this.router.navigate(['/login'], { queryParams: { returnUrl: state.url }});\n        return false;\n    }\n}","import { Injectable } from '@angular/core';\nimport { Router, NavigationStart } from '@angular/router';\nimport { Observable, Subject } from 'rxjs';\n\n@Injectable({ providedIn: 'root' })\nexport class AlertService {\n    private subject = new Subject<any>();\n    private keepAfterRouteChange = false;\n\n    constructor(private router: Router) {\n        // clear alert messages on route change unless 'keepAfterRouteChange' flag is true\n        this.router.events.subscribe(event => {\n            if (event instanceof NavigationStart) {\n                if (this.keepAfterRouteChange) {\n                    // only keep for a single route change\n                    this.keepAfterRouteChange = false;\n                } else {\n                    // clear alert message\n                    this.clear();\n                }\n            }\n        });\n    }\n\n    getAlert(): Observable<any> {\n        return this.subject.asObservable();\n    }\n\n    success(message: string, keepAfterRouteChange = false) {\n        this.keepAfterRouteChange = keepAfterRouteChange;\n        this.subject.next({ type: 'success', text: message });\n    }\n\n    error(message: string, keepAfterRouteChange = false) {\n        this.keepAfterRouteChange = keepAfterRouteChange;\n        this.subject.next({ type: 'error', text: message });\n    }\n\n    clear() {\n        // clear by calling subject.next() without parameters\n        this.subject.next();\n    }\n}","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { User } from '@/_models';\n\n@Injectable({ providedIn: 'root' })\nexport class AuthenticationService {\n    private currentUserSubject: BehaviorSubject<User>;\n    public currentUser: Observable<User>;\n\n    constructor(private http: HttpClient) {\n        this.currentUserSubject = new BehaviorSubject<User>(JSON.parse(localStorage.getItem('currentUser')));\n        this.currentUser = this.currentUserSubject.asObservable();\n    }\n\n    public get currentUserValue(): User {\n        return this.currentUserSubject.value;\n    }\n\n    login(username, password) {\n        return this.http.post<any>(`/mobile-app-ws/users/login`, { email: username, password })\n            .pipe(map(user => {\n                // store user details and jwt token in local storage to keep user logged in between page refreshes\n                debugger;\n                user = username;\n                localStorage.setItem('currentUser', JSON.stringify(user));\n                this.currentUserSubject.next(user);\n                return user;\n            }));\n    }\n\n    logout() {\n        // remove user from local storage and set current user to null\n        localStorage.removeItem('currentUser');\n        this.currentUserSubject.next(null);\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\nimport { User } from '@/_models';\n\n@Injectable({ providedIn: 'root' })\nexport class UserService {\n    constructor(private http: HttpClient) { }\n\n    getAll() {\n        return this.http.get<User[]>(`${config.apiUrl}/users`);\n    }\n\n    register(user: User) {\n        return this.http.post('/mobile-app-ws/users', user);\n    }\n\n    delete(id: number) {\n        return this.http.delete(`${config.apiUrl}/users/${id}`);\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpRequest, HttpHandler, HttpEvent, HttpInterceptor } from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { AuthenticationService } from '@/_services';\n\n@Injectable()\nexport class ErrorInterceptor implements HttpInterceptor {\n    constructor(private authenticationService: AuthenticationService) {}\n\n    intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n        return next.handle(request).pipe(catchError(err => {\n            if (err.status === 401) {\n                // auto logout if 401 response returned from api\n                this.authenticationService.logout();\n                location.reload(true);\n            }\n            \n            const error = err.error.message || err.statusText;\n            return throwError(error);\n        }))\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpRequest, HttpHandler, HttpEvent, HttpInterceptor } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\nimport { AuthenticationService } from '@/_services';\n\n@Injectable()\nexport class JwtInterceptor implements HttpInterceptor {\n    constructor(private authenticationService: AuthenticationService) {}\n\n    intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n        // add authorization header with jwt token if available\n        // debugger;\n        let currentUser = this.authenticationService.currentUserValue;\n        if (currentUser && currentUser.token) {\n            request = request.clone({\n                setHeaders: { \n                    Authorization: `Bearer ${currentUser.token}`\n                }\n            });\n        }\n\n        return next.handle(request);\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpRequest, HttpResponse, HttpHandler, HttpEvent, HttpInterceptor, HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { Observable, of, throwError } from 'rxjs';\nimport { delay, mergeMap, materialize, dematerialize } from 'rxjs/operators';\n\n// array in local storage for registered users\nlet users = JSON.parse(localStorage.getItem('users')) || [];\n\n@Injectable()\nexport class FakeBackendInterceptor implements HttpInterceptor {\n    intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n        const { url, method, headers, body } = request;\n\n        // wrap in delayed observable to simulate server api call\n        return of(null)\n            .pipe(mergeMap(handleRoute))\n            .pipe(materialize()) // call materialize and dematerialize to ensure delay even if an error is thrown (https://github.com/Reactive-Extensions/RxJS/issues/648)\n            .pipe(delay(500))\n            .pipe(dematerialize());\n\n        function handleRoute() {\n            switch (true) {\n                case url.endsWith('/users/authenticate') && method === 'POST':\n                    return authenticate();\n                case url.endsWith('/users/register') && method === 'POST':\n                    return register();\n                case url.endsWith('/users') && method === 'GET':\n                    return getUsers();\n                case url.match(/\\/users\\/\\d+$/) && method === 'DELETE':\n                    return deleteUser();\n                default:\n                    // pass through any requests not handled above\n                    return next.handle(request);\n            }    \n        }\n\n        // route functions\n\n        function authenticate() {\n            const { username, password } = body;\n            const user = users.find(x => x.username === username && x.password === password);\n            if (!user) return error('Username or password is incorrect');\n            return ok({\n                id: user.id,\n                username: user.username,\n                firstName: user.firstName,\n                lastName: user.lastName,\n                token: 'fake-jwt-token'\n            })\n        }\n\n        function register() {\n            const user = body\n\n            if (users.find(x => x.username === user.username)) {\n                return error('Username \"' + user.username + '\" is already taken')\n            }\n\n            user.id = users.length ? Math.max(...users.map(x => x.id)) + 1 : 1;\n            users.push(user);\n            localStorage.setItem('users', JSON.stringify(users));\n\n            return ok();\n        }\n\n        function getUsers() {\n            if (!isLoggedIn()) return unauthorized();\n            return ok(users);\n        }\n\n        function deleteUser() {\n            if (!isLoggedIn()) return unauthorized();\n\n            users = users.filter(x => x.id !== idFromUrl());\n            localStorage.setItem('users', JSON.stringify(users));\n            return ok();\n        }\n\n        // helper functions\n\n        function ok(body?) {\n            return of(new HttpResponse({ status: 200, body }))\n        }\n\n        function error(message) {\n            return throwError({ error: { message } });\n        }\n\n        function unauthorized() {\n            return throwError({ status: 401, error: { message: 'Unauthorised' } });\n        }\n\n        function isLoggedIn() {\n            return headers.get('Authorization') === 'Bearer fake-jwt-token';\n        }\n\n        function idFromUrl() {\n            const urlParts = url.split('/');\n            return parseInt(urlParts[urlParts.length - 1]);\n        }\n    }\n}\n\nexport const fakeBackendProvider = {\n    // use fake backend in place of Http service for backend-less development\n    provide: HTTP_INTERCEPTORS,\n    useClass: FakeBackendInterceptor,\n    multi: true\n};","import { Routes, RouterModule } from '@angular/router';\n\nimport { HomeComponent } from './home';\nimport { LoginComponent } from './login';\nimport { RegisterComponent } from './register';\nimport { AuthGuard } from './_helpers';\n\nconst routes: Routes = [\n    { path: '', component: HomeComponent, canActivate: [AuthGuard] },\n    { path: 'login', component: LoginComponent },\n    { path: 'register', component: RegisterComponent },\n\n    // otherwise redirect to home\n    { path: '**', redirectTo: '' }\n];\n\nexport const appRoutingModule = RouterModule.forRoot(routes, {useHash: true});\n","import { Component, OnInit } from '@angular/core';\nimport { first } from 'rxjs/operators';\n\nimport { User } from '@/_models';\nimport { UserService, AuthenticationService } from '@/_services';\n\n@Component({ template: require('./home.component.html') })\nexport class HomeComponent implements OnInit {\n    currentUser: User;\n    users = [];\n\n    constructor(\n        private authenticationService: AuthenticationService,\n        private userService: UserService\n    ) {\n        this.currentUser = this.authenticationService.currentUserValue;\n    }\n\n    ngOnInit() {\n        this.loadAllUsers();\n    }\n\n    deleteUser(id: number) {\n        /*this.userService.delete(id)\n            .pipe(first())\n            .subscribe(() => this.loadAllUsers());*/\n    }\n\n    private loadAllUsers() {\n        /*this.userService.getAll()\n            .pipe(first())\n            .subscribe(users => this.users = users);*/\n    }\n}\n","module.exports = \"<h1>Hi {{currentUser}}!</h1>\\n<p>You're logged in with Angular 8!!</p>\\n<h3>All registered users:</h3>\\n<ul>\\n    <li *ngFor=\\\"let user of users\\\">\\n        {{user.username}} ({{user.firstName}} {{user.lastName}})\\n        - <a (click)=\\\"deleteUser(user.id)\\\" class=\\\"text-danger\\\">Delete</a>\\n    </li>\\n</ul>\\n\";","import { Component, OnInit } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { first } from 'rxjs/operators';\n\nimport { AlertService, AuthenticationService } from '@/_services';\n\n@Component({ template: require('./login.component.html') })\nexport class LoginComponent implements OnInit {\n    loginForm: FormGroup;\n    loading = false;\n    submitted = false;\n    returnUrl: string;\n\n    constructor(\n        private formBuilder: FormBuilder,\n        private route: ActivatedRoute,\n        private router: Router,\n        private authenticationService: AuthenticationService,\n        private alertService: AlertService\n    ) {\n        // redirect to home if already logged in\n        if (this.authenticationService.currentUserValue) {\n            this.router.navigate(['/']);\n        }\n    }\n\n    ngOnInit() {\n        this.loginForm = this.formBuilder.group({\n            username: ['', Validators.required],\n            password: ['', Validators.required]\n        });\n\n        // get return url from route parameters or default to '/'\n        this.returnUrl = this.route.snapshot.queryParams['returnUrl'] || '/';\n    }\n\n    // convenience getter for easy access to form fields\n    get f() { return this.loginForm.controls; }\n\n    onSubmit() {\n        this.submitted = true;\n\n        // reset alerts on submit\n        this.alertService.clear();\n\n        // stop here if form is invalid\n        if (this.loginForm.invalid) {\n            return;\n        }\n\n        this.loading = true;\n        this.authenticationService.login(this.f.username.value, this.f.password.value)\n            .pipe(first())\n            .subscribe(\n                data => {\n                    debugger;\n                    this.router.navigate([this.returnUrl]);\n                },\n                error => {\n                    debugger;\n                    console.log(\"Login error:\", error);\n                    this.alertService.error(\"Invalid username or password\");\n                    this.loading = false;\n                });\n    }\n}\n","module.exports = \"<h2>Login</h2>\\n<form [formGroup]=\\\"loginForm\\\" (ngSubmit)=\\\"onSubmit()\\\">\\n    <div class=\\\"form-group\\\">\\n        <label for=\\\"username\\\">Username</label>\\n        <input type=\\\"text\\\" formControlName=\\\"username\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.username.errors }\\\" />\\n        <div *ngIf=\\\"submitted && f.username.errors\\\" class=\\\"invalid-feedback\\\">\\n            <div *ngIf=\\\"f.username.errors.required\\\">Username is required</div>\\n        </div>\\n    </div>\\n    <div class=\\\"form-group\\\">\\n        <label for=\\\"password\\\">Password</label>\\n        <input type=\\\"password\\\" formControlName=\\\"password\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.password.errors }\\\" />\\n        <div *ngIf=\\\"submitted && f.password.errors\\\" class=\\\"invalid-feedback\\\">\\n            <div *ngIf=\\\"f.password.errors.required\\\">Password is required</div>\\n        </div>\\n    </div>\\n    <div class=\\\"form-group\\\">\\n        <button [disabled]=\\\"loading\\\" class=\\\"btn btn-primary\\\">\\n            <span *ngIf=\\\"loading\\\" class=\\\"spinner-border spinner-border-sm mr-1\\\"></span>\\n            Login\\n        </button>\\n        <a routerLink=\\\"/register\\\" class=\\\"btn btn-link\\\">Register</a>\\n    </div>\\n</form>\";","import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { first } from 'rxjs/operators';\n\nimport { AlertService, UserService, AuthenticationService } from '@/_services';\n\n@Component({ template: require('./register.component.html') })\nexport class RegisterComponent implements OnInit {\n    registerForm: FormGroup;\n    loading = false;\n    submitted = false;\n\n    constructor(\n        private formBuilder: FormBuilder,\n        private router: Router,\n        private authenticationService: AuthenticationService,\n        private userService: UserService,\n        private alertService: AlertService\n    ) {\n        // redirect to home if already logged in\n        if (this.authenticationService.currentUserValue) {\n            this.router.navigate(['/']);\n        }\n    }\n\n    ngOnInit() {\n        this.registerForm = this.formBuilder.group({\n            firstName: ['', Validators.required],\n            lastName: ['', Validators.required],\n            email: ['', Validators.required],\n            password: ['', [Validators.required, Validators.minLength(6)]]\n        });\n    }\n\n    // convenience getter for easy access to form fields\n    get f() { return this.registerForm.controls; }\n\n    onSubmit() {\n        this.submitted = true;\n\n        // reset alerts on submit\n        this.alertService.clear();\n\n        // stop here if form is invalid\n        if (this.registerForm.invalid) {\n            return;\n        }\n\n        this.loading = true;\n        debugger;\n        this.userService.register({...this.registerForm.value, addresses: []})\n            .pipe(first())\n            .subscribe(\n                data => {\n                    this.alertService.success('Registration successful', true);\n                    this.router.navigate(['/login']);\n                },\n                error => {\n                    this.alertService.error(error);\n                    this.loading = false;\n                });\n    }\n}\n","module.exports = \"<h2>Register</h2>\\n<form [formGroup]=\\\"registerForm\\\" (ngSubmit)=\\\"onSubmit()\\\">\\n    <div class=\\\"form-group\\\">\\n        <label for=\\\"firstName\\\">First Name</label>\\n        <input type=\\\"text\\\" formControlName=\\\"firstName\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.firstName.errors }\\\" />\\n        <div *ngIf=\\\"submitted && f.firstName.errors\\\" class=\\\"invalid-feedback\\\">\\n            <div *ngIf=\\\"f.firstName.errors.required\\\">First Name is required</div>\\n        </div>\\n    </div>\\n    <div class=\\\"form-group\\\">\\n        <label for=\\\"lastName\\\">Last Name</label>\\n        <input type=\\\"text\\\" formControlName=\\\"lastName\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.lastName.errors }\\\" />\\n        <div *ngIf=\\\"submitted && f.lastName.errors\\\" class=\\\"invalid-feedback\\\">\\n            <div *ngIf=\\\"f.lastName.errors.required\\\">Last Name is required</div>\\n        </div>\\n    </div>\\n    <div class=\\\"form-group\\\">\\n        <label for=\\\"email\\\">Email</label>\\n        <input id=\\\"email\\\" type=\\\"text\\\" formControlName=\\\"email\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.email.errors }\\\" />\\n        <div *ngIf=\\\"submitted && f.email.errors\\\" class=\\\"invalid-feedback\\\">\\n            <div *ngIf=\\\"f.email.errors.required\\\">Email is required</div>\\n        </div>\\n    </div>\\n    <div class=\\\"form-group\\\">\\n        <label for=\\\"password\\\">Password</label>\\n        <input type=\\\"password\\\" formControlName=\\\"password\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.password.errors }\\\" />\\n        <div *ngIf=\\\"submitted && f.password.errors\\\" class=\\\"invalid-feedback\\\">\\n            <div *ngIf=\\\"f.password.errors.required\\\">Password is required</div>\\n            <div *ngIf=\\\"f.password.errors.minlength\\\">Password must be at least 6 characters</div>\\n        </div>\\n    </div>\\n    <div class=\\\"form-group\\\">\\n        <button [disabled]=\\\"loading\\\" class=\\\"btn btn-primary\\\">\\n            <span *ngIf=\\\"loading\\\" class=\\\"spinner-border spinner-border-sm mr-1\\\"></span>\\n            Register\\n        </button>\\n        <a routerLink=\\\"/login\\\" class=\\\"btn btn-link\\\">Cancel</a>\\n    </div>\\n</form>\\n\";","import {Component} from '@angular/core';\nimport {Router} from '@angular/router';\n\nimport {AuthenticationService} from './_services';\nimport {User} from './_models';\n\nimport './_content/app.less';\n\n@Component({selector: 'app', template: require('./app.component.html')})\nexport class AppComponent {\n    currentUser: User;\n\n    constructor(\n        private router: Router,\n        private authenticationService: AuthenticationService\n    ) {\n        this.authenticationService.currentUser.subscribe(x => this.currentUser = x);\n    }\n\n    logout() {\n        this.authenticationService.logout();\n        this.router.navigate(['/login']);\n    }\n}\n","\nvar content = require(\"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/less-loader/dist/cjs.js!./app.less\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../../../node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/less-loader/dist/cjs.js!./app.less\", function() {\n\t\tvar newContent = require(\"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/less-loader/dist/cjs.js!./app.less\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}","exports = module.exports = require(\"../../../node_modules/css-loader/dist/runtime/api.js\")(false);\n// Module\nexports.push([module.id, \"a {\\n  cursor: pointer;\\n}\\n\", \"\"]);\n\n","module.exports = \"<!-- nav -->\\n<nav class=\\\"navbar navbar-expand navbar-dark bg-dark\\\" *ngIf=\\\"currentUser\\\">\\n    <div class=\\\"navbar-nav\\\">\\n        <a class=\\\"nav-item nav-link\\\" routerLink=\\\"/\\\">Home</a>\\n        <a class=\\\"nav-item nav-link\\\" (click)=\\\"logout()\\\">Logout</a>\\n    </div>\\n</nav>\\n\\n<!-- main app container -->\\n<div class=\\\"jumbotron\\\">\\n    <div class=\\\"container\\\">\\n        <div class=\\\"row\\\">\\n            <div class=\\\"col-sm-6 offset-sm-3\\\">\\n                <alert></alert>\\n                <router-outlet></router-outlet>\\n            </div>\\n        </div>\\n    </div>\\n</div>\\n\\n<!-- credits -->\\n<div class=\\\"text-center\\\">\\n    <p>\\n        <a href=\\\"\\\" target=\\\"_top\\\">Developed by Cloudlet</a>\\n    </p>\\n    <p>\\n        <a href=\\\"https://cloudlet.com\\\" target=\\\"_top\\\">cloudlet.com</a>\\n    </p>\\n</div>\\n\";","export * from './alert.component';","import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { Subscription } from 'rxjs';\n\nimport { AlertService } from '@/_services';\n\n@Component({ selector: 'alert', template: require('./alert.component.html') })\nexport class AlertComponent implements OnInit, OnDestroy {\n    private subscription: Subscription;\n    message: any;\n\n    constructor(private alertService: AlertService) { }\n\n    ngOnInit() {\n        this.subscription = this.alertService.getAlert()\n            .subscribe(message => {\n                switch (message && message.type) {\n                    case 'success':\n                        message.cssClass = 'alert alert-success';\n                        break;\n                    case 'error':\n                        message.cssClass = 'alert alert-danger';\n                        break;\n                }\n\n                this.message = message;\n            });\n    }\n\n    ngOnDestroy() {\n        this.subscription.unsubscribe();\n    }\n}","module.exports = \"<div *ngIf=\\\"message\\\" [ngClass]=\\\"message.cssClass\\\">{{message.text}}</div>\";","export * from './alert.service';\nexport * from './authentication.service';\nexport * from './user.service';"],"sourceRoot":""}